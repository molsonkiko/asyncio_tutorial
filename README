Hi Professor(s)!

Thank you so much for teaching me so much in this course! I've learned a lot
about some tools that seem both useful and often fun, and overcome my fear of
working with virtual machines.

This is just some guidance on how to understand the Project/activity I created.
The focus of the activity is on using asyncio to concurrently perform slow IO
tasks, and learn how to use the Python DB API at the same time.

How the project is organized:
1. My lecture notes, covering the DB API and asyncio, are in a Jupyter notebook 
	and a (low-quality) PDF.
2. The questions that I would ask for the activity are in questions.txt.
3. The fake_sales.sqlite and fake_sales.csv that would be used in the activity
	can be generated using make_fake_sales.py.
	The database generated by that script would be linked to in the instructions
	for that assignment.
4. The sales_data subdirectory that would contain the JSON files for part D
	(simulated web scraping exercise) can be made using make_sales_data.py.
	Those files could be packaged in a zip file for the assignment.
5. My answers for each part are in answers_partAB.py, async_db_access.py, and
	async_file_reading.py.
6. Finally, you can run the project start-to-finish with run_project.sh.

I was motivated to create this activity because:
	1a. I wasn't fully satisfied with the coverage of Python threading in this
		course. It seemed to me like the Python threading Activity and Project
		were too obviously the "easy way out" for students who didn't want to
		learn a whole new language.
	1b. Because Python doesn't do parallelism, it makes sense for a Python
		threading activity to have a motivating example that's a little bit
		different than the motivating example for Java threading.
		The classic example is web scraping, but this class assumes no prior
		experience with HTML, so web scraping is probably not the best idea.
		Part D of the activity (see questions.txt and async_file_reading.py)
		attempts to approximate the experience of web scraping.
	2. The Python DB API is easy to learn (once you already know SQL and Python)
		and very helpful to know, so I wanted to cover that.
	3. I personally wanted to learn more about `asyncio`, and get a better 
		sense of its pros and cons compared to the `threading` library.